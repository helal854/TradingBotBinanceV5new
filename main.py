"""
ุงูููู ุงูุฑุฆูุณู ูุจูุช ุงูุชุฏุงูู
"""
import asyncio
import logging
import sys
from pathlib import Path

from aiogram import Bot, Dispatcher
from aiogram.enums import ParseMode
from aiogram.fsm.storage.memory import MemoryStorage

# ุฅุถุงูุฉ ูุณุงุฑ ุงููุดุฑูุน
sys.path.append(str(Path(__file__).parent))

from config.config import BOT_TOKEN, LOGGING_CONFIG, ADMIN_USER_ID
from src.database import db_manager
from src.handlers import router
from src.admin_handlers import admin_router
from src.api_clients import APIManager, BINANCE_API_KEY, BINANCE_SECRET_KEY

# ุฅุนุฏุงุฏ ุงูุชุณุฌูู
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('logs/bot.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)

logger = logging.getLogger(__name__)

# ุฅูุดุงุก ุงูุจูุช ูุงูููุฒุน
bot = Bot(token=BOT_TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher(storage=MemoryStorage())

# ุชุณุฌูู ุงูุฑุงูุชุฑุงุช
dp.include_router(router)
dp.include_router(admin_router)

# ูุฏูุฑ APIs ุงูุนุงู
api_manager = None

async def on_startup():
    """ุฅุนุฏุงุฏุงุช ุจุฏุก ุงูุชุดุบูู"""
    try:
        logger.info("๐ ุจุฏุก ุชุดุบูู ุงูุจูุช...")
        
        # ุฅูุดุงุก ุงููุฌูุฏุงุช ุงููุทููุจุฉ
        Path("data").mkdir(exist_ok=True)
        Path("logs").mkdir(exist_ok=True)
        
        # ุชููุฆุฉ ูุงุนุฏุฉ ุงูุจูุงูุงุช
        await db_manager.init_database()
        logger.info("โ ุชู ุชููุฆุฉ ูุงุนุฏุฉ ุงูุจูุงูุงุช")
        
        # ุชููุฆุฉ ูุฏูุฑ APIs
        global api_manager
        api_manager = APIManager(BINANCE_API_KEY, BINANCE_SECRET_KEY)
        await api_manager.init_all()
        logger.info("โ ุชู ุชููุฆุฉ ุฌููุน APIs")
        
        # ุฅุฑุณุงู ุฑุณุงูุฉ ูููุณุคูู
        try:
            await bot.send_message(
                ADMIN_USER_ID,
                "๐ข **ุงูุจูุช ูุนูู ุงูุขู**\n\nุชู ุชุดุบูู ุงูุจูุช ุจูุฌุงุญ ูุฌููุน ุงูุฃูุธูุฉ ุชุนูู ุจุดูู ุทุจูุนู.",
                parse_mode=ParseMode.MARKDOWN
            )
        except Exception as e:
            logger.warning(f"ูู ูุชู ุฅุฑุณุงู ุฑุณุงูุฉ ุงูุจุฏุก ูููุณุคูู: {e}")
        
        logger.info("๐ ุชู ุชุดุบูู ุงูุจูุช ุจูุฌุงุญ!")
        
    except Exception as e:
        logger.error(f"โ ุฎุทุฃ ูู ุจุฏุก ุงูุชุดุบูู: {e}")
        raise

async def on_shutdown():
    """ุฅุนุฏุงุฏุงุช ุฅููุงู ุงูุชุดุบูู"""
    try:
        logger.info("๐ ุฅููุงู ุงูุจูุช...")
        
        # ุฅุบูุงู ุงุชุตุงูุงุช APIs
        if api_manager:
            await api_manager.close_all()
        
        # ุฅุฑุณุงู ุฑุณุงูุฉ ูููุณุคูู
        try:
            await bot.send_message(
                ADMIN_USER_ID,
                "๐ด **ุชู ุฅููุงู ุงูุจูุช**\n\nุชู ุฅููุงู ุงูุจูุช ุจุฃูุงู.",
                parse_mode=ParseMode.MARKDOWN
            )
        except Exception as e:
            logger.warning(f"ูู ูุชู ุฅุฑุณุงู ุฑุณุงูุฉ ุงูุฅููุงู ูููุณุคูู: {e}")
        
        logger.info("โ ุชู ุฅููุงู ุงูุจูุช ุจุฃูุงู")
        
    except Exception as e:
        logger.error(f"โ ุฎุทุฃ ูู ุฅููุงู ุงูุชุดุบูู: {e}")

async def main():
    """ุงูุฏุงูุฉ ุงูุฑุฆูุณูุฉ"""
    try:
        # ุชุณุฌูู ูุนุงูุฌุงุช ุจุฏุก ูุฅููุงู ุงูุชุดุบูู
        dp.startup.register(on_startup)
        dp.shutdown.register(on_shutdown)
        
        # ุจุฏุก ุงูุจูุช
        await dp.start_polling(
            bot,
            allowed_updates=dp.resolve_used_update_types()
        )
        
    except KeyboardInterrupt:
        logger.info("ุชู ุฅููุงู ุงูุจูุช ุจูุงุณุทุฉ ุงููุณุชุฎุฏู")
    except Exception as e:
        logger.error(f"ุฎุทุฃ ูู ุชุดุบูู ุงูุจูุช: {e}")
    finally:
        await bot.session.close()

if __name__ == "__main__":
    try:
        # ุชุดุบูู ุงูุจูุช
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("ุชู ุฅููุงุก ุงูุจุฑูุงูุฌ")
    except Exception as e:
        logger.error(f"ุฎุทุฃ ุนุงู: {e}")
        sys.exit(1)

